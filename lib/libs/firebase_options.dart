// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions currentPlatform(Map<String, String> env) {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptions have not been configured for web - '
            'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android(env);
      case TargetPlatform.iOS:
        return ios(env);
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for macos - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
              'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions android(Map<String, String> env) {
    return FirebaseOptions(
      apiKey: env['FIREBASE_ANDROID_API_KEY'] ?? '',
      appId: env['FIREBASE_ANDROID_APP_ID'] ?? '',
      messagingSenderId: env['FIREBASE_ANDROID_MESSAGING_SENDER_ID'] ?? '',
      projectId: env['FIREBASE_ANDROID_PROJECT_ID'] ?? '',
      databaseURL: env['FIREBASE_ANDROID_DATABASE_URL'] ?? '',
      storageBucket: env['FIREBASE_ANDROID_STORAGE_BUCKET'] ?? '',
    );
  }

  static FirebaseOptions ios(Map<String, String> env) {
    return FirebaseOptions(
      apiKey: env['FIREBASE_IOS_API_KEY'] ?? '',
      appId: env['FIREBASE_IOS_APP_ID'] ?? '',
      messagingSenderId: env['FIREBASE_IOS_MESSAGING_SENDER_ID'] ?? '',
      projectId: env['FIREBASE_IOS_PROJECT_ID'] ?? '',
      databaseURL: env['FIREBASE_IOS_DATABASE_URL'] ?? '',
      storageBucket: env['FIREBASE_IOS_STORAGE_BUCKET'] ?? '',
      androidClientId: env['FIREBASE_IOS_ANDROID_CLIENT_ID'] ?? '',
      iosClientId: env['FIREBASE_IOS_IOS_CLIENT_ID'] ?? '',
      iosBundleId: env['FIREBASE_IOS_IOS_BUNDLE_ID'] ?? '',
    );
  }
}
